diff --git a/R/functions.R b/R/functions.R
index d3883526..07cded66 100755
--- a/R/functions.R
+++ b/R/functions.R
@@ -3,27 +3,32 @@
 # various functions and objects for BIAD
 #----------------------------------------------------------------------------------------------------
 #----------------------------------------------------------------------------------------------------
-dbname <<- 'BIAD'
-source("https://raw.githubusercontent.com/BIADwiki/BIADwiki/main/R/functions.database.connect.R")
 source("https://raw.githubusercontent.com/AdrianTimpson/snippets/main/R/functions.R")
 #----------------------------------------------------------------------------------------------------
-run.server.searcher <- function(table.name, primary.value){
-
+run.server.searcher <- function(table.name, primary.value, db.credentials=NULL, hostuser=NULL, hostname=NULL, pempath=NULL){	
 	text <- c(
-		paste0("user <- '",user,"'"),
-		paste0("password <- '",password,"'"),
-		paste0("hostuser <- '",hostuser,"'"),
-		"source('https://raw.githubusercontent.com/BIADwiki/BIADwiki/main/R/functions.R')",
+		"source('functions.R')",
+		"source('functions.database.connect.R')",
 		paste("table.name <- '",table.name,"'",sep=''),
 		paste("primary.value <- '",primary.value,"'",sep=''),
-		"down <- get.related.data(table.name, primary.value, fnc = decendants, user, password)",
-		"up <- get.related.data(table.name, primary.value, fnc = ancestors, user, password)",
+        "conn <- init.conn()", ##credendtial will be passed through env variable so they don't need to be written anywhere
+		"down <- get.related.data(table.name, primary.value, fnc = decendants, conn = conn)",
+		"up <- get.related.data(table.name, primary.value, fnc = ancestors, conn = conn)",
 		"query <- list(down=down,up=up)",
-		"save(query, file='tmp.RData')"
+		"save(query, file='tmp.RData')",
+		"DBI::dbDisconnect(conn)"
 		)
 	writeLines(text,con= 'server.script.R')
-	query <- run.server.query.inner(user, password, hostuser, hostname, pempath)
+	query <- run.server.query.inner(db.credentials=db.credentials, hostuser=hostuser, hostname=hostname, pempath=pempath)
 return(query)}
+
+#----------------------------------------------------------------------------------------------------
+#Create a function that use the remote connection to the database to do the search
+run.searcher <- function(table.name, primary.value, conn = NULL, db.credential = NULL){
+	down <- get.related.data(table.name, primary.value, fnc = decendants, conn = conn , db.credential = db.credential)
+	up <- get.related.data(table.name, primary.value, fnc = ancestors, conn = conn , db.credential = db.credential)
+	list(down=down,up=up)
+}
 #----------------------------------------------------------------------------------------------------
 create.markdown.for.single.table <- function(d.tables, d.cols, table.name){
 	
@@ -100,14 +105,14 @@ get.tables.from.backup <- function(file){
 		}
 return(tables)}
 #----------------------------------------------------------------------------------------------------
-get.child.relationships <- function(keys, table.name, primary.value, user, password, host, port){
-	primary.data <- get.table.data(keys, table.name, primary.value, user, password, host, port)
+get.child.relationships <- function(keys, table.name, primary.value, conn = NULL, db.credentials = NULL){
+	primary.data <- get.table.data(keys, table.name, primary.value, conn = conn, db.credentials = db.credentials)
 	primary.column <- get.primary.column.from.table(keys, table.name)
 	res <- subset(keys, REFERENCED_COLUMN_NAME==primary.column & REFERENCED_TABLE_NAME==table.name)
 return(res)}
 #----------------------------------------------------------------------------------------------------
-get.parent.relationships <- function(keys, table.name, primary.value, user, password, host, port){
-	primary.data <- get.table.data(keys, table.name, primary.value, user, password, host, port)
+get.parent.relationships <- function(keys, table.name, primary.value, conn = NULL, db.credentials = NULL){
+	primary.data <- get.table.data(keys, table.name, primary.value, conn = conn, db.credentials = db.credentials)
 	primary.column <- get.primary.column.from.table(keys, table.name)
 	res <- subset(keys, TABLE_NAME==table.name & grepl('FK_',CONSTRAINT_NAME))
 return(res)}
@@ -119,19 +124,18 @@ get.primary.column.from.table <- function(keys, table.name){
 	if(length(column)>1)stop('unclear which column to use')	
 return(column)}
 #----------------------------------------------------------------------------------------------------
-get.table.data <- function(keys, table.name, primary.value, user, password, host, port){
-
+get.table.data <- function(keys, table.name, primary.value, conn = NULL, db.credentials = NULL){
 	if(length(primary.value)!=1)stop('provide a single primary value')
 	primary.column <- get.primary.column.from.table(keys, table.name)
 	sql.command <- paste("SELECT * FROM `BIAD`.`",table.name,"` WHERE ",primary.column," IN ('",primary.value,"')", sep='')
-	data <- suppressWarnings(query.database(user, password, host, port, dbname, sql.command))
+	data <- query.database(conn = conn,db.credentials = db.credentials, sql.command = sql.command)
 	data <- remove.blank.columns.from.table(data)
 return(data)}
 #----------------------------------------------------------------------------------------------------
-decendants <- function(keys, table.name, primary.value, user, password, host, port){
+decendants <- function(keys, table.name, primary.value, conn = NULL, db.credentials = NULL){
 
 	if(is.null(primary.value))return(NULL)
-	relationships <- get.child.relationships(keys, table.name, primary.value, user, password, host, port)
+	relationships <- get.child.relationships(keys, table.name, primary.value, conn, db.credentials)
 	child.tables <- relationships$TABLE_NAME
 	child.columns <- relationships$COLUMN_NAME
 
@@ -142,7 +146,7 @@ decendants <- function(keys, table.name, primary.value, user, password, host, po
 		child.table <- child.tables[n]
 		child.column <- child.columns[n]
 		sql.command <- paste("SELECT * FROM `BIAD`.`",child.table,"` WHERE ",child.column," = '",primary.value,"'", sep='')
-		data <- suppressWarnings(query.database(user, password, host, port, dbname, sql.command))
+		data <- query.database(conn = conn, db.credentials = db.credentials, sql.command = sql.command)
 		data <- remove.blank.columns.from.table(data)
 		res[[child.table]]$data <- data
 		}
@@ -150,17 +154,17 @@ decendants <- function(keys, table.name, primary.value, user, password, host, po
 
 return(res)}
 #----------------------------------------------------------------------------------------------------
-ancestors <- function(keys, table.name, primary.value, user, password, host, port){
+ancestors <- function(keys, table.name, primary.value, conn = NULL, db.credentials = NULL){
 
 	if(is.null(primary.value))return(NULL)
-	relationships <- get.parent.relationships(keys, table.name, primary.value, user, password, host, port)
+	relationships <- get.parent.relationships(keys, table.name, primary.value, conn, db.credentials)
 	
 	# whether or not to include zoptions parents? ... subset(relationships, !grepl('zoptions_',REFERENCED_TABLE_NAME))
 	parent.tables <- relationships$REFERENCED_TABLE_NAME
 	parent.columns <- relationships$REFERENCED_COLUMN_NAME
 	child.columns <- relationships$COLUMN_NAME
 	
-	table.data <- get.table.data(keys, table.name, primary.value, user, password, host, port)
+	table.data <- get.table.data(keys, table.name, primary.value, conn, db.credentials)
 	
 	res <- list()
 	N <- length(parent.tables)
@@ -177,7 +181,7 @@ ancestors <- function(keys, table.name, primary.value, user, password, host, por
 			values <- values[!is.na(values)]
 			values <- paste(values, collapse="','")
 			sql.command <- paste("SELECT * FROM `BIAD`.`",parent.table,"` WHERE ",parent.column," IN ('",values,"')", sep='')		
-			data <- suppressWarnings(query.database(user, password, host, port, dbname, sql.command))
+			data <- query.database(conn, db.credentials, sql.command)
 			data <- remove.blank.columns.from.table(data)
 			res[[parent.table]]$data <- data	
 			}	
@@ -187,7 +191,7 @@ ancestors <- function(keys, table.name, primary.value, user, password, host, por
 
 return(res)}
 #----------------------------------------------------------------------------------------------------
-wrapper <- function(keys, table.data, fnc, user, password, host, port){
+wrapper <- function(keys, table.data, fnc, conn = NULL, db.credentials = NULL){
 	rel.data <- list()
 	N <- length(table.data)
 	for(n in 1:N){
@@ -197,7 +201,7 @@ wrapper <- function(keys, table.data, fnc, user, password, host, port){
 		rel.values <- rel[[table.name]]$data[[col]]
 		for(rel in rel.values){
 
-			x <- fnc(keys, table.name, rel, user, password,host) 
+			x <- fnc(keys, table.name, rel, conn = conn , db.credentials = db.credentials) 
 			rel.data[[table.name]][[rel]] <- x
 			}
 		}
@@ -211,20 +215,20 @@ remove.blank.columns.from.table <- function(table){
 	tb <- tb[,keep.i,drop=F]
 return(tb)}
 #----------------------------------------------------------------------------------------------------
-get.related.data <- function(table.name, primary.value, fnc, user, password, host, port){
+get.related.data <- function(table.name, primary.value, fnc, conn = NULL, db.credentials = NULL){
 
 	sql.command <- "SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_SCHEMA='BIAD'"
-	keys <- query.database(user, password, host, port, dbname, sql.command)
+	keys <- query.database(conn = conn, db.credentials = db.credentials, sql.command = sql.command)
 
 	# table data
 	all.data <- list()
-	table.data <- get.table.data(keys, table.name, primary.value, user, password, host, port) 
+	table.data <- get.table.data(keys, table.name, primary.value, conn, db.credentials) 
 	if(is.null(table.data))return(NULL)
 	all.data[[table.name]]$data <- table.data
 	
 	# relative level 0 data
 	x.data <- all.data[table.name]
-	x.sub <- wrapper(keys, table.data=x.data, fnc, user, password, host, port)
+	x.sub <- wrapper(keys, table.data=x.data, fnc, conn = conn, db.credentials = db.credentials)
 	if(!is.null(x.sub))all.data[table.name] <- Map(c, x.data,x.sub)
 
 	# relative level 1 data
@@ -232,7 +236,7 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 	rel.1.names <- rel.1.names[rel.1.names!='data']	
 	for(rel.1.name in rel.1.names){
 		x.data <- all.data[[table.name]][[primary.value]][rel.1.name]
-		x.sub <- wrapper(keys, x.data, fnc, user, password, host, port)
+		x.sub <- wrapper(keys, x.data, fnc, conn = conn, db.credentials = db.credentials)
 		if(!is.null(x.sub))all.data[[table.name]][[primary.value]][rel.1.name] <- Map(c, x.data,x.sub)
 		}
 
@@ -244,7 +248,7 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 		rel.2.names <- rel.2.names[rel.2.names!='data']	
 		for(rel.2.name in rel.2.names){
 			x.data <- all.data[[table.name]][[primary.value]][[rel.1.name]][rel.2.name]
-			x.sub <- wrapper(keys, x.data, fnc, user, password, host, port)
+			x.sub <- wrapper(keys, x.data, fnc, conn, db.credentials)
 			if(!is.null(x.sub))all.data[[table.name]][[primary.value]][[rel.1.name]][rel.2.name] <- Map(c, x.data,x.sub)
 			}
 		}
@@ -260,7 +264,7 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 			rel.3.names <- rel.3.names[rel.3.names!='data']	
 			for(rel.3.name in rel.3.names){	
 				x.data <- all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][rel.3.name]
-				x.sub <- wrapper(keys, x.data, fnc, user, password, host, port)
+				x.sub <- wrapper(keys, x.data, fnc, conn, db.credentials)
 				if(!is.null(x.sub))all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][rel.3.name] <- Map(c, x.data,x.sub)
 				}
 			}	
@@ -280,7 +284,7 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 				rel.4.names <- rel.4.names[rel.4.names!='data']	
 				for(rel.4.name in rel.4.names){
 					x.data <- all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][[rel.3.name]][rel.4.name]
-					x.sub <- wrapper(keys, x.data, fnc, user, password, host, port)
+					x.sub <- wrapper(keys, x.data, fnc, conn, db.credentials)
 					if(!is.null(x.sub))all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][[rel.3.name]][rel.4.name] <- Map(c, x.data,x.sub)
 					}
 				}
@@ -304,7 +308,7 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 					rel.5.names <- rel.5.names[rel.5.names!='data']	
 					for(rel.5.name in rel.5.names){
 						x.data <- all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][[rel.3.name]][[rel.4.name]][rel.5.name]
-						x.sub <- wrapper(keys, x.data, fnc, user, password)
+						x.sub <- wrapper(keys, x.data, fnc, conn = conn , db.credentials = db.credentials)
 						if(!is.null(x.sub))all.data[[table.name]][[primary.value]][[rel.1.name]][[rel.2.name]][[rel.3.name]][[rel.4.name]][rel.5.name] <- Map(c, x.data,x.sub)
 						}
 					}
@@ -314,12 +318,12 @@ get.related.data <- function(table.name, primary.value, fnc, user, password, hos
 
 return(all.data)}
 #----------------------------------------------------------------------------------------------------
-database.relationship.plotter <- function(d.tables, include.look.ups=TRUE, user, password, host, port){
+database.relationship.plotter <- function(d.tables, include.look.ups=TRUE, conn = NULL, db.credentials = NULL){
 
 	require(DiagrammeR)
 
 	sql.command <- "SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = 'BIAD'"
-	d <- suppressWarnings(query.database(user, password, host, port, dbname, sql.command))
+	d <- query.database(conn, db.credentials, sql.command)
 	d <- subset(d, TABLE_NAME%in%strsplit(d.tables,split='; ')[[1]])
 	if(!include.look.ups){
 		d <- subset(d, REFERENCED_TABLE_NAME%in%strsplit(d.tables,split='; ')[[1]])
diff --git a/R/functions.database.connect.R b/R/functions.database.connect.R
index 438689c7..bcd1891d 100644
--- a/R/functions.database.connect.R
+++ b/R/functions.database.connect.R
@@ -3,43 +3,75 @@
 # generic functions to query any database hosted at macelab
 #----------------------------------------------------------------------------------------------------
 #----------------------------------------------------------------------------------------------------
-run.server.query <- function(sql.command){	
+run.server.query <- function(sql.command,db.credentials=NULL, hostuser=NULL, hostname=NULL, pempath=NULL){	
 
 	# create 'server.script.R' to be run on server
 	text <- c(
-		paste0("user <- '",user,"'"),
-		paste0("password <- '",password,"'"),
-		paste0("hostuser <- '",hostuser,"'"),
-		paste0("dbname <- '",dbname,"'"),
-		"source('https://raw.githubusercontent.com/BIADwiki/BIADwiki/main/R/functions.database.connect.R')",
+		"source('functions.database.connect.R')",
+		"source('functions.R')",
 		paste('sql.command <- c("',paste(sql.command,collapse='","'),'")',sep=''),
-		"query <- query.database(user, password, dbname, sql.command)",
-		"save(query, file='tmp.RData')"
+        "conn <- init.conn()", ##credendtial will be passed through env variable so they don't need to be written anywhere
+		"query <- query.database(conn, sql.command)",
+		"save(query, file='tmp.RData')",
+		"DBI::dbDisconnect(conn)",
 		)
 	writeLines(text,con= 'server.script.R')
 
-	query <- run.server.query.inner(user, password, hostuser, hostname, pempath)
+	query <- run.server.query.inner(db.credentials=db.credentials, hostuser=hostuser, hostname=hostname, pempath=pempath)
 return(query)}
 #----------------------------------------------------------------------------------------------------
-run.server.query.inner <- function(user, password, hostuser, hostname, pempath){ 
+run.server.query.inner <- function(db.credentials=NULL, hostuser=NULL, hostname=NULL, pempath=NULL){ 
 	require(ssh)
+
+    hostuser <- Sys.getenv("BIAD_SSH_USER")
+    hostname <- Sys.getenv("BIAD_SSH_HOST")
+    pempath <- Sys.getenv("BIAD_SSH_PEM")
+    if (any(c(hostuser, hostname, pempath) == "") || any(is.na(c(hostuser, hostname, pempath)))) {
+        if (exists("hostuser", envir = .GlobalEnv) && exists("hostname", envir = .GlobalEnv) && exists("pempath", envir = .GlobalEnv)) {
+            warning(
+                "seems like SSH connection details are still set from global environment (using .Rprofile) \n",
+                "To avoid this warning in the future, please set the SSH connection details via environment variables in your .Renviron or .bashrc file:\n",
+                "- BIAD_SSH_USER=your_ssh_username\n",
+                "- BIAD_SSH_HOST=your_ssh_hostname\n",
+                "- BIAD_SSH_PEM=path_to_your_pem_file\n"
+            )
+        hostuser <- get("hostuser", envir = .GlobalEnv)
+        hostname <- get("hostname", envir = .GlobalEnv)
+        pempath <- get("pempath", envir = .GlobalEnv)
+        } else {
+            stop("Error: Missing details for SSH connection and no global environment values found.")
+        }
+    }
+
 	tmp.path <- paste("tmp/tmp",runif(1),sep='')
+    if(is.na(Sys.getenv("BIAD_DB_USER")) || is.null(Sys.getenv("BIAD_DB_USER")) || is.null(Sys.getenv("BIAD_DB_USER"))){
+        error("as probably only you adrian and I are using this ssh feature i won't do fancy test, but you need to put usernames and passwords in environment variable (via ~/.Renviron or export VAR=dsadsa")
+    }
+    env_vars <- paste0("BIAD_DB_USER=\"",Sys.getenv("BIAD_DB_USER"),"\" ",
+                       "BIAD_DB_PASS=\"",Sys.getenv("BIAD_DB_PASS"),"\" ",
+                       "BIAD_DB_PORT=",3306," ",  
+                       "BIAD_DB_HOST=","\"127.0.0.1\"")
 
 	# create bash commands to be run on server
 	commands <- c(
 		paste("cd",tmp.path),
-		"/Library/Frameworks/R.framework/Resources/bin/R CMD BATCH --no-save server.script.R tmp.Rout",
+		paste(env_vars,"/Library/Frameworks/R.framework/Resources/bin/R CMD BATCH --no-save server.script.R tmp.Rout"),
 		"cd .."
 		)
 
 	# ssh onto server, copy required files to server, tell server to run R, copy results back to local 
-	session <- ssh_connect(host=paste(hostuser,"@",hostname,sep=''), keyfile=pempath)
-	ssh_exec_wait(session, command = paste("mkdir",tmp.path))
-	scp_upload(session, files = "server.script.R" , to = tmp.path, verbose=FALSE)
+	session <- ssh::ssh_connect(host=paste(hostuser,"@",hostname,sep=''), keyfile=pempath)
+	ssh::ssh_exec_wait(session, command = paste("mkdir",tmp.path))
+	ssh::scp_upload(session, files = "server.script.R" , to = tmp.path, verbose=FALSE)
+    ## --- this should disapear when BIADwiki becomes a packages as we'll load the package instead of sourcing things
+	ssh::scp_upload(session, files = "functions.R" , to = tmp.path, verbose=FALSE)
+	ssh::scp_upload(session, files = "functions.database.connect.R" , to = tmp.path, verbose=FALSE)
 	unlink('server.script.R')
-	ssh_exec_wait(session, command = commands)
+	ssh::ssh_exec_wait(session, command = commands)
 	RData <- paste(tmp.path,"tmp.RData",sep="/")
-	scp_download(session, files = RData, to = getwd(), verbose=FALSE)
+	Rout <- paste(tmp.path,"tmp.Rout",sep="/")
+	ssh::scp_download(session, files = RData, to = getwd(), verbose=FALSE)
+	ssh::scp_download(session, files = Rout, to = getwd(), verbose=FALSE)
 	cond <- file.exists("tmp.RData")
 	if(cond){
 		load('tmp.RData')
@@ -47,49 +79,147 @@ run.server.query.inner <- function(user, password, hostuser, hostname, pempath){
 		}
 	if(!cond){
 		query <- NULL
+        na <- sapply( readLines("tmp.Rout"),function(i)cat(i,"\n"))
 		warning('sql command failed')
 		}
-	ssh_exec_wait(session, command = paste("rm -r",tmp.path))
-	ssh_disconnect(session)
-
+    #ssh::ssh_exec_wait(session, command = paste("rm -r",tmp.path))
+	ssh::ssh_disconnect(session)
 return(query)}
-#--------------------------------------------------------------------------------------------------
-query.database.inner <- function(user, password, host, port, dbname, sql.command){
-	require(RMySQL)
-	drv <- dbDriver("MySQL")
 
-	# close any connections to the database
-	cons <- dbListConnections(MySQL())
-	for(con in cons)dbDisconnect(con)
-
-	# connect locally to the database
-	con <- dbConnect(drv, user=user, pass=password, dbname=dbname, host = host, port = port)
-	dbSendStatement(con,"SET NAMES 'utf8'")
-
-	# query the database and tidy
-	for(n in 1:length(sql.command)) res <- dbSendStatement(con,sql.command[n])
+run.server.query.inner.alt <- function(db.credentials=NULL, hostuser=NULL, hostname=NULL, pempath=NULL){ 
+    tmp.path <- tempfile(pattern = "tmpdir")
+    linkcred="-i ${BIAD_SSH_PEM}"
+    host="${BIAD_SSH_USER}@${BIAD_SSH_HOST}" #we rely again on the ENV var
+    system(paste("ssh", linkcred, host, shQuote(paste("mkdir -p", tmp.path))))
+    sourcefold=here::here("R") #link to the source files
+    system(paste("scp", linkcred,"server.script.R", file.path(host,tmp.path)))
+    system(paste("scp", linkcred,file.path(sourcefold,"function*.R"), paste0(host,":",tmp.path,"/")))
+	RData <- file.path(tmp.path,"tmp.RData")
+	Rout <- file.path(tmp.path,"tmp.Rout")
+    system(paste("scp", linkcred, paste0(host,":",RData),"."))
+    system(paste("scp", linkcred, paste0(host,":",Rout),"."))
+	cond <- file.exists("tmp.RData")
+	if(cond){
+		load('tmp.RData')
+		unlink('tmp.RData')
+		}
+	if(!cond){
+		query <- NULL
+        na <- sapply( readLines("tmp.Rout"),function(i)cat(i,"\n"))
+		warning('sql command failed')
+		}
+}
+#--------------------------------------------------------------------------------------------------
+query.database <- function(sql.command, conn=NULL, db.credentials=NULL){
+    if(is.null(conn) || !DBI::dbIsValid(conn) ){ #check if no connector has been provided, or if the connector doesnt work
+        #print("no connector provided, creating one here connecting ")
+        if(exists("conn", envir = .GlobalEnv))conn <- get("conn", envir = .GlobalEnv) #check if a connector already exist at global level
+        if(is.null(conn) || !DBI::dbIsValid(conn) ){
+            #print("the global connector is not good, delete and retry ")
+            disco <- disconnect()
+            conn <- init.conn(db.credentials=db.credentials)
+            assign("conn",conn,envir = .GlobalEnv)
+        }
+        #else{ print("connector exist at global, continue with it")}
+    }
+    #else{ print("connector provided")}
+	for(n in 1:length(sql.command)) {
+        res <- tryCatch(suppressWarnings(DBI::dbSendStatement(conn,sql.command[n])),
+                    error=function(e){
+                        print(e)
+                        stop("error while sending command:",sql.command[n])
+                    })
+    }
 	query <- fetch(res, n= -1)
+    DBI::dbClearResult(res)
 	query <- encoder(query)
-
-	# close any connections to the database
-	cons <- dbListConnections(MySQL())
-	for(con in cons)dbDisconnect(con)
-return(query)}
-#--------------------------------------------------------------------------------------------------
-query.database <- function(user, password, host, port, dbname, sql.command){
-
-	query <- query.database.inner(user, password, host, port, dbname, sql.command)
-return(query)}
+    return(query)
+}
 #--------------------------------------------------------------------------------------------------
 encoder <- function(df){
-	if(nrow(df)==0) return(NULL)
-	names(df) <- iconv(names(df),from="UTF-8",to="UTF-8")
-	if(nrow(df)>0){
-		for(n in 1:ncol(df))
-		if(class(df[,n])=="character"){
-			df[,n] <- iconv(df[,n],from="UTF-8",to="UTF-8")
-			}
-		return(df)	
-		}
-	}
+    if(nrow(df)==0) return(NULL)
+    names(df) <- iconv(names(df),from="UTF-8",to="UTF-8")
+    char <- sapply(df,class) == 'character'
+    df[,char] <- apply(df[,char,drop=F],2,iconv,from="UTF-8",to="UTF-8")
+    return(df)	
+}
 #--------------------------------------------------------------------------------------------------
+#' Initialize Database Connection
+#'
+#' This function initializes a connection to the BIAD database using the provided
+#' credentials. If no credentials are supplied, it attempts to retrieve them from
+#' environment variables that should be stored in `~/.Renviron`
+#'
+#' @param db.credentials A list containing database connection details. The list 
+#' should include `user`, `password`, `host`, and `port`. If `NULL`, defaults 
+#' to fetching these values from environment variables. You can store these in
+#' `~/.Renviron` or export them in your environment using your favorite method
+#' (ie: $export host='127.0.0.1')
+
+#' @return A DBI connection object to the MySQL database.
+#' @examples
+#' \dontrun{
+#' # Using environment variables:
+#' conn <- init.conn()
+#'
+#' # Using explicit credentials:
+#' db.credentials <- list(
+#'   user = "my_user",
+#'   password = "my_password",
+#'   host = "localhost",
+#'   port = 3306
+#' )
+#' conn <- init.conn(db.credentials)
+#' }
+init.conn <- function(db.credentials=NULL){
+    require(RMySQL)
+    if(is.null(db.credentials)){
+        db.credentials <- list(
+            BIAD_DB_USER=Sys.getenv("BIAD_DB_USER"),
+            BIAD_DB_PASS=Sys.getenv("BIAD_DB_PASS"),
+            BIAD_DB_HOST=Sys.getenv("BIAD_DB_HOST"),
+            BIAD_DB_PORT=as.numeric(Sys.getenv("BIAD_DB_PORT"))
+        )
+    }
+    if (all(sapply(db.credentials, function(cred) is.null(cred) || is.na(cred) || cred == ""))) {
+        if (exists("user", envir = .GlobalEnv) && exists("password", envir = .GlobalEnv)) {
+            warning("It seems that you are still using credentials set in .Rprofile; we will slowly move to using environment variables that you will set in your ~/.Renviron or you ~/.bashrc.\n\r",
+                    "Your ~/.Renviron should be like:\n",
+                    "\t BIAD_DB_USER=\"your username\"\n",
+                    "\t BIAD_DB_PASS=\"your password\"\n",
+                    "\t BIAD_DB_HOST=127.0.0.1 \n",
+                    "\t BIAD_DB_PORT=3306 #or something different if you specified a different port\n",
+                    "  or add:  export BIAD_DB_XXX=XXX to your .bashrc")
+            db.credentials$BIAD_DB_USER <- get("user", envir = .GlobalEnv)
+            db.credentials$BIAD_DB_PASS <- get("password", envir = .GlobalEnv)
+            db.credentials$BIAD_DB_HOST <- "127.0.0.1"
+            db.credentials$BIAD_DB_PORT <- 3307
+        } 
+    }
+    missing_vars <- names(db.credentials)[sapply(db.credentials, function(x) is.null(x) || is.na(x) || x == "")]
+    if (length(missing_vars) > 0) 
+        warning("Missing: ", paste(missing_vars, collapse = ", "), ". You may want to check your ~/.Renviron file and reload R, or manually provide db.credentials as a list to init.conn.")
+    
+    conn <-  tryCatch(
+            DBI::dbConnect(drv=DBI::dbDriver("MySQL"), user=db.credentials$BIAD_DB_USER, pass=db.credentials$BIAD_DB_PASS, dbname="biad", host = db.credentials$BIAD_DB_HOST, port=db.credentials$BIAD_DB_PORT) ,
+        error=function(e){
+            message("Couldn't initialise connection with the database, dbConnect returned error: ", e)
+            message("Check your db.credentials below:")
+            na <- sapply(names(db.credentials),function(nc)message(nc,": ", ifelse(nc=="password",msp(db.credentials[[nc]]),db.credentials[[nc]])))
+            message("Note: you can only connect to the dataset through ssh ; so you may want to check you're ssh tunel (or any plugin you may use to do so) is working (cf:https://biadwiki.org/en/Connect)")
+            stop("DBConnection fail")
+    })
+    return(conn)	
+}
+#--------------------------------------------------------------------------------------------------
+#' msp(Mask Password)
+#' This function masks a given password by replacing all but the first and last character with asterisks.
+#' @param password A character string representing the password to be masked.
+#' @return A character string with the masked password.
+msp <- function(password) {
+    if(length(password)<=0)return(NULL)
+    maskp <- strsplit(password, "")[[1]]
+    paste0(maskp[1], paste0(rep("*", length(maskp) - 2), collapse = ""), maskp[length(maskp)])
+}
+
+disconnect <- function(drv="MySQL") sapply(DBI::dbListConnections(DBI::dbDriver(drv)),dbDisconnect)
